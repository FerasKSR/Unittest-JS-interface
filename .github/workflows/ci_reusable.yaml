name: Build, Test and Deploy the Marketplace Interface - Reusable workflow

on:
  push:

jobs:
  build-test-deploy:
    name: Build, Test and Deploy the Marketplace Interface
    runs-on: ubuntu-22.04
    env:
      REACT_APP_BUYER_SELLER_AGREEMENT_TEMPLATE: "ipfs://QmaUobgQYrMnm2jZ3WowPtwRs4MpMR2TSinp3ChebjnZwe"
      REACT_APP_RNFT_LICENSE_TEMPLATE: "ipfs://QmPbzbp7xcSKhQPjT5VacLRMVgM1U6DB4LiF2GVyHhvcA7"
      REACT_APP_FAIR_EXCHANGE_POLICY_RULES: "ipfs://QmX8Wnq1eWbf7pRhEDQqdAqWp17YSKXQq8ckZVe4YdqAvt"
      REACT_APP_ENV_NAME: ${{ inputs.REACT_APP_ENV_NAME }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      REACT_APP_ENABLE_CURATION_LISTS: ${{ inputs.REACT_APP_ENABLE_CURATION_LISTS }}
      REACT_APP_OFFER_CURATION_LIST: ${{ inputs.REACT_APP_OFFER_CURATION_LIST }}
      REACT_APP_IPFS_GATEWAY: ${{ inputs.REACT_APP_IPFS_GATEWAY }}
      REACT_APP_IPFS_IMAGE_GATEWAY: ${{ inputs.REACT_APP_IPFS_IMAGE_GATEWAY }}
      REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS: ${{ secrets.REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS }}
      REACT_APP_INFURA_IPFS_PROJECT_ID: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_ID }}
      REACT_APP_INFURA_IPFS_PROJECT_SECRET: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_SECRET }}
      REACT_APP_GOOGLE_TAG_ID: ${{ secrets.REACT_APP_GOOGLE_TAG_ID }}
      REACT_APP_META_TX_API_KEY_MAP: ${{ inputs.REACT_APP_META_TX_API_KEY_MAP }}
      REACT_APP_META_TX_API_IDS_MAP: ${{ inputs.REACT_APP_META_TX_API_IDS_MAP }}
      REACT_APP_META_TX_RELAYER_URL: ${{ inputs.REACT_APP_META_TX_RELAYER_URL }}
      REACT_APP_WALLET_CONNECT_PROJECT_ID: ${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}
      REACT_APP_RELEASE_TAG: ${{ inputs.REACT_APP_RELEASE_TAG }}
      REACT_APP_RELEASE_NAME: ${{ inputs.REACT_APP_RELEASE_NAME }}
      REACT_APP_VIEW_MODE: "dapp"
      REACT_APP_DAPP_VIEW_MODE: ${{ inputs.REACT_APP_DAPP_VIEW_MODE }}
      REACT_APP_DR_CENTER_VIEW_MODE: ${{ inputs.REACT_APP_DR_CENTER_VIEW_MODE }}
      REACT_APP_WIDGETS_URL: ${{ inputs.REACT_APP_WIDGETS_URL }}
      REACT_APP_UNISWAP_API_URL: ${{ inputs.REACT_APP_UNISWAP_API_URL }}
      REACT_APP_AWS_API_ENDPOINT: ${{ inputs.REACT_APP_AWS_API_ENDPOINT }}
      REACT_APP_MOONPAY_API: ${{ inputs.REACT_APP_MOONPAY_API }}
      REACT_APP_MOONPAY_LINK: ${{ inputs.REACT_APP_MOONPAY_LINK }}
      REACT_APP_INFURA_KEY: ${{ secrets.REACT_APP_INFURA_KEY }}
      REACT_APP_MOONPAY_API_KEY: ${{ secrets.REACT_APP_MOONPAY_API_KEY }}
      REACT_APP_MOONPAY_EXTERNAL_LINK: ${{ inputs.REACT_APP_MOONPAY_EXTERNAL_LINK }}
      REACT_APP_MAGIC_API_KEY: ${{ secrets.REACT_APP_MAGIC_API_KEY }}
    outputs:
      jobLint: ${{ steps.lint.outputs.pass }}
      jobBuild: ${{ steps.build.outputs.pass }}
      jobCoverage: ${{ steps.coverage.outputs.pass }}
      deployUrl: ${{ steps.deploy.outputs.deployUrl }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - name: Create Sentry release
        if: ${{ inputs.IS_PREVIEW == false }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: "boson-protocol"
          SENTRY_PROJECT: "v2-dapp"
        with:
          environment: ${{ inputs.ENV_NAME }}
          version: ${{ inputs.REACT_APP_RELEASE_NAME }}
      - run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - run: npm run prettier
      - run: npm run tsc
      - run: npm run test
      - run: npm run lint
      - id: lint
        run: echo "::set-output name=pass::success"
      - run: npm run build
      - id: build
        run: echo "::set-output name=pass::success"
      - name: Run Tests & Generate coverage reports
        run: npm run coverage:report
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage